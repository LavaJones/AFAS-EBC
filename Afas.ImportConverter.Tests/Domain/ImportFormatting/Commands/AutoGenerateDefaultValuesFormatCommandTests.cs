using Afas.ImportConverter.Domain.ImportFormatting;
using Afas.ImportConverter.Domain.ImportFormatting.Generators;
using Afas.ImportConverter.Domain.POCO;
using NUnit.Framework;
using Rhino.Mocks;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Afas.ImportConverter.Tests.Domain.ImportFormatting.Commands
{
    [TestFixture]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public class cTests
    {
        private ImportData testData;

        private DataRow testRow;

        private IManagedValueGenerator stubedGenerator;

        private AImportFormatCommand TestObject;

        /// <summary>
        /// Test setup that should run before every test to make sure that the Mocks are in a consistent state
        /// </summary>
        [SetUp]
        public void Init()
        {
            testData = new ImportData();
            testData.Data = new DataTable();
            testData.Data.Columns.Add("TestColumn", typeof(string));
            testRow = testData.Data.NewRow();
            testRow["TestColumn"] = null;
            testData.Data.Rows.Add(testRow);

            stubedGenerator = MockRepository.GenerateMock<IManagedValueGenerator>();
            stubedGenerator.Stub(gen => gen.GenerateDefaultValue(
                    Arg<string>.Is.Equal("TestType"), 
                    Arg<string>.Is.Equal("TestPattern"), 
                    Arg<DataRow>.Is.Anything))
                .Return("TestDefault");

            TestObject = new AutoGenerateDefaultValuesFormatCommand(stubedGenerator);
            TestObject.Parameters.Add("ColumnName","TestColumn");
            TestObject.Parameters.Add("GeneratorType","TestType");
            TestObject.Parameters.Add("GeneratorPattern","TestPattern");
            TestObject.CreatedBy = "tester";
            TestObject.ModifiedBy = "tester";
            TestObject.EntityStatus = Afc.Core.Domain.EntityStatusEnum.Active;
            TestObject.MetaData = MockRepository.GenerateMock<ImportMetaData>();

        }

        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_ConstructorTest_NullDependency()
        {
            
            Assert.Throws<ArgumentNullException>(
                ()=>{new AutoGenerateDefaultValuesFormatCommand(null);},
                "Did not recieve expected Null Argument exception on a null dependency."
                );

        }

        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_Constructor_HappyPath()
        {

            var obj = new AutoGenerateDefaultValuesFormatCommand(stubedGenerator);
            Assert.NotNull(obj);

            Assert.AreNotEqual(0, obj.EnsureIsWellFormed.Count);

            Assert.AreEqual(0, TestObject.EnsureIsWellFormed.Count);

        }

        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_GetterTest()
        {
            Assert.AreEqual(ImportFormatCommandTypes.AutoGenerateDefaultValues, TestObject.CommandType);
            Assert.IsNotNull(TestObject.RequiredParameters);
            Assert.IsNotNull(TestObject.OptionalParameters);
            Assert.AreEqual(3, TestObject.RequiredParameters.Count);
            Assert.IsTrue(TestObject.RequiredParameters.Contains("ColumnName"));
            Assert.IsTrue(TestObject.RequiredParameters.Contains("GeneratorType"));
            Assert.IsTrue(TestObject.RequiredParameters.Contains("GeneratorPattern"));
            Assert.AreEqual(0, TestObject.OptionalParameters.Count);

        }

        private List<DataRow> BuildRows(int number) 
        {
            var rows = new List<DataRow>();

            for (int i = 1; i < number; i++)
            {
                DataRow row = testData.Data.NewRow();
                testData.Data.Rows.Add(row);
                rows.Add(row);
            }

            return rows;
        }

        [TestCase(0)]
        [TestCase(1)]
        [TestCase(3)]
        [TestCase(40)]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_HappyPath(int rowCount)
        {
            
            Assert.IsTrue(testData.Data.Columns.Contains("TestColumn"));

            Assert.IsTrue(testRow.IsNull("TestColumn"));
            List<DataRow> builtRows = BuildRows(rowCount);

            Assert.IsTrue(TestObject.ApplyTo(testData));

            foreach (DataRow row in builtRows)
            {
                Assert.AreEqual("TestDefault", row["TestColumn"]);
            }

        }

        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_GeneraterReturnedBlank()
        {

            stubedGenerator.BackToRecord(BackToRecordOptions.All);
            stubedGenerator.Replay();
            stubedGenerator.Stub(gen => gen.GenerateDefaultValue(
                    Arg<string>.Is.Equal("TestType"),
                    Arg<string>.Is.Equal("TestPattern"),
                    Arg<DataRow>.Is.Anything))
                        .Return("");

            Assert.IsTrue(testData.Data.Columns.Contains("TestColumn"));

            Assert.IsTrue(testRow.IsNull("TestColumn"));
            List<DataRow> builtRows = BuildRows(3);

            Assert.IsTrue(TestObject.ApplyTo(testData));

            foreach (DataRow row in builtRows)
            {
                Assert.AreEqual(DBNull.Value, row["TestColumn"]);
            }

        }

        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_MissingColumn()
        {

            TestObject.Parameters["ColumnName"] = "OtherColumn";
            Assert.IsFalse(testData.Data.Columns.Contains("OtherColumn"));

            Assert.IsFalse(TestObject.ApplyTo(testData));

            Assert.IsTrue(testRow.IsNull("TestColumn"));
            Assert.IsFalse(testData.Data.Columns.Contains("OtherColumn"));

        }

        private List<DataRow> FillRows(int number, string column = "TestColumn", string value = "TestValue")
        {
            List<DataRow> rows = BuildRows(number);

            foreach (DataRow row in rows)
            {
                row[column] = value;
            }

            return rows;
        }

        [TestCase(1)]
        [TestCase(3)]
        [TestCase(40)]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_ExistingValue(int rowCount)
        {
            
            testRow["TestColumn"] = "TestValue";
            List<DataRow> builtRows = FillRows(rowCount);

            foreach (DataRow row in builtRows)
            {
                Assert.AreEqual("TestValue", testRow["TestColumn"]);
            }
            

            Assert.IsTrue(TestObject.ApplyTo(testData));

            foreach (DataRow row in builtRows)
            {
                Assert.AreEqual("TestValue", testRow["TestColumn"]);
            }

        }

        [TestCase(1)]
        [TestCase(3)]
        [TestCase(40)]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_SomeExistingValues(int rowCount)
        {

            testRow["TestColumn"] = null;
            List<DataRow> builtRows = FillRows(rowCount);

            foreach (DataRow row in builtRows)
            {
                Assert.AreEqual("TestValue", row["TestColumn"]);
            }
            Assert.IsTrue(testRow.IsNull("TestColumn"));

            Assert.IsTrue(TestObject.ApplyTo(testData));

            Assert.IsTrue(testData.Data.Columns.Contains("TestColumn"));

            Assert.AreEqual("TestDefault", testRow["TestColumn"]);

            foreach (DataRow row in builtRows)
            {
                Assert.AreEqual("TestValue", row["TestColumn"]);
            }

        }

        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        [TestCase("      ")]
        [TestCase(" ")]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_BadParamColumn(string value)
        {

            TestObject.Parameters["ColumnName"] = value;
            Assert.IsFalse(TestObject.ApplyTo(testData));

            Assert.IsTrue(testRow.IsNull("TestColumn"));
        
        }
        
        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_MissingParamColumn()
        {

            TestObject.Parameters.Remove("ColumnName");
            Assert.IsFalse(TestObject.ApplyTo(testData));

            Assert.IsTrue(testRow.IsNull("TestColumn"));

        }

        [TestCase(null)]
        [TestCase("")]
        [TestCase(" ")]
        [TestCase("      ")]
        [TestCase(" ")]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_BadParamGenType(string value)
        {

            TestObject.Parameters["GeneratorType"] = value;
            Assert.IsFalse(TestObject.ApplyTo(testData));

            Assert.IsTrue(testRow.IsNull("TestColumn"));

        }

        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_MissingParamGenType()
        {

            TestObject.Parameters.Remove("GeneratorType");
            Assert.IsFalse(TestObject.ApplyTo(testData));

            Assert.IsTrue(testRow.IsNull("TestColumn"));

        }
      
        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_ExpectedException()
        {
            
            stubedGenerator.BackToRecord(BackToRecordOptions.All);
            stubedGenerator.Replay();
            stubedGenerator.Stub(gen => gen.GenerateDefaultValue(
                Arg<string>.Is.Anything,
                Arg<string>.Is.Anything,
                Arg<DataRow>.Is.Anything)).Throw(new ArgumentException("Expected Exception"));

            Assert.IsFalse(TestObject.ApplyTo(testData));

            Assert.IsTrue(testRow.IsNull("TestColumn"));

        }

        [Test]
        public void AutoGenerateDefaultValuesFormatCommand_ApplyTo_UnExpectedException()
        {

            stubedGenerator.BackToRecord(BackToRecordOptions.All);
            stubedGenerator.Replay();
            stubedGenerator.Stub(gen => gen.GenerateDefaultValue(
                    Arg<string>.Is.Anything,
                    Arg<string>.Is.Anything,
                    Arg<DataRow>.Is.Anything))
                .Throw(new Exception("unexpected Exception"));

            Assert.IsFalse(TestObject.ApplyTo(testData));

            Assert.IsTrue(testRow.IsNull("TestColumn"));

        }
    }
}
