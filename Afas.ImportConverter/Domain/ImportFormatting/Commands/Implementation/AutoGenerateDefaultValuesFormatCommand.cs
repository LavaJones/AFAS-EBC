using Afas.ImportConverter.Domain.POCO;
using log4net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Afas.Domain;
using Afas.ImportConverter.Domain.ImportFormatting.Generators;

namespace Afas.ImportConverter.Domain.ImportFormatting
{
    /// <summary>
    /// This class implemements the Auto-Generate Default Values Command, 
    /// that takes one column and replaces nulls or blanks with a calculated value.
    /// This is a mid level change that generally happens after column name changes.
    /// </summary>
    public class AutoGenerateDefaultValuesFormatCommand : AImportFormatCommand
    {
        private ILog Log = LogManager.GetLogger(typeof(AutoGenerateDefaultValuesFormatCommand));

        /// <summary>
        /// The Managed Generator responsible for Generating Default Values
        /// </summary>
        private IManagedValueGenerator Generator;

        /// <summary>
        /// The Type of command that this is
        /// </summary>
        public override ImportFormatCommandTypes CommandType
        {
            // This is hard coded because we are using the strategy pattern (ish) 
            get { return ImportFormatCommandTypes.AutoGenerateDefaultValues; }
        }
        
        /// <summary>
        /// A list of the Required Parameters that the Command cannot function without.
        /// </summary>
        public override IList<string> RequiredParameters { get { return new List<string> { "ColumnName", "GeneratorType", "GeneratorPattern" }; } }

        /// <summary>
        /// A list of optional Parameters that the Command can use but are not Required.
        /// </summary>
        public override IList<string> OptionalParameters { get { return new List<string>(); } }

        public AutoGenerateDefaultValuesFormatCommand() : base()
        {

        }

        /// <summary>
        /// Default Constructor, sets initial values
        /// </summary>
        /// <param name="parameters">The Parameters for this Command.</param>
        /// <param name="scope">The scope to which this Command is applied</param>
        /// <param name="importFormatCommandId">Data base Id or 0</param>
        public AutoGenerateDefaultValuesFormatCommand(IManagedValueGenerator generator) : base() 
        {
            // Use default behavior Plus
            if (null == generator) 
            {
                throw new ArgumentNullException("Generator");
            }

            this.Generator = generator;
        }

        /// <summary>
        /// Apply this Command to format this data
        /// </summary>
        /// <param name="metaData">The metaData, including the data to be formatted.</param>
        /// <returns>True if the format was applied correctly, false if there was a failure.</returns>
        public override bool ApplyTo(ImportData metaData)
        {
            try
            {
                System.Data.DataTable data = metaData.Data;

                // This param should be the header name of the column to fill.
                string ColumnName = Parameters["ColumnName"];

                // This Param should be the type of Generator to use
                string GeneratorType = Parameters["GeneratorType"];

                // This Param should be the type of Generator to use
                string GeneratorPattern = Parameters["GeneratorPattern"];

                if (GeneratorType.IsNullOrEmpty() || GeneratorType.Trim().IsNullOrEmpty())
                {
                    // if the Generator Type is blank or null
                    Log.Info("GeneratorType is not valid [" + GeneratorType + "] for AddNewColumnFormatCommand.");

                    return false;
                } 

                if (ColumnName.IsNullOrEmpty() || ColumnName.Trim().IsNullOrEmpty())
                {
                    // if the column name is blank or null
                    Log.Info("ColumnName is not valid [" + ColumnName + "] for AddNewColumnFormatCommand.");

                    return false;
                }
                
                if (data.Columns.Contains(ColumnName))
                {

                    Log.Info(String.Format("Applying AutoGenerateDefaultValuesFormatCommand, using params: ColumnName: [{0}], GeneratorType: [{1}], GeneratorPattern: [{2}] on data.Rows.Count: [{3}]",
                        ColumnName, GeneratorType, GeneratorPattern, data.Rows.Count));

                    // If the Data has the column, then we are fine
                    // check each row
                    foreach (System.Data.DataRow row in data.Rows)
                    {
                        // check to see if the value is null
                        if (row[ColumnName] == null || row[ColumnName] == DBNull.Value || row[ColumnName].ToString().IsNullOrEmpty())// || row[ColumnName].ToString().Trim().IsNullOrEmpty())
                        {
                            try
                            {
                                string DefaultValue = Generator.GenerateDefaultValue(GeneratorType, GeneratorPattern, row);
                                if (DefaultValue != null && false == DefaultValue.IsNullOrEmpty())
                                {
                                    // replace the null with the default value
                                    row[ColumnName] = DefaultValue;
                                }
                            }
                            catch (ArgumentException argEx) 
                            {
                                Log.Warn("Argument Exception while trying to Generate Default Value.", argEx);
                                return false;
                            }
                            
                        }
                    }
                }
                else 
                {                
                    // If it doesn't contain this column then we ignore it

                    Log.Info("Table Did not contain column [" + ColumnName + "] for AutoGenerateDefaultValuesFormatCommand.");

                    return false;
                }
            }
            catch (Exception ex)
            {
                Log.Error("Exception while trying to Apply AutoGenerateDefaultValuesFormatCommand to Data.", ex);
                return false;
            }
            
            return true;
        }
    }
}
